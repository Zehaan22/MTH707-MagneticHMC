## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-500,500, length = 1e3)
p0 <- seq(-500,500, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-500,500, length = 1e3)
p0 <- seq(-500,500, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-500,500, length = 1e3)
p0 <- seq(-500,500, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
plot3d(x0, p0, lc(x0,po))
plot3d(x0, p0, lc(x0,p0))
x0 <- seq(-100,100, length = 1e3)
p0 <- seq(-100,100, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, lc(x0,p0))
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 1e3)
p0 <- seq(-1000,1000, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 2e3)
p0 <- seq(-1000,1000, length = 2e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 3e3)
p0 <- seq(-1000,1000, length = 3e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
x0 <- seq(-1000,1000, length = 4e3)
p0 <- seq(-1000,1000, length = 4e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
x0 <- seq(-1000,1000, length = 5e3)
p0 <- seq(-1000,1000, length = 5e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
setwd("~/Course Work/SEM-6/MTH707/MTH707-MagneticHMC/Codes/HMC Toy Example")
######## loading the algorithm
source("Algorithm.R")
################### Samples
chain <- Standard_HMC(N = 1e4,
k = 2,
L = 10,
eps = 0.1)
################### Loading the Algorithm
source("Algorithm.R")
################### Samples
chain <- Standard_HMC(N = 1e4,
k = 2,
L = 10,
eps = 0.1)
################### Loading the Algorithm
source("Algorithm.R")
################### Samples
chain <- Standard_HMC(N = 1e4,
k = 2,
L = 10,
eps = 0.1)
## Trace plot
plot(chain[,1],type = "l",col = "blue",
xlab = "Iteration",ylab = "Parameter Value",
main = "Trace Plot of Parameter 1")
par(mfrow = c(2,1))
plot(chain[,1],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 1")
plot(chain[,2],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 2")
################### Solution to the universe
set.seed(42)
################### Samples
chain <- Standard_HMC(N = 1e5,
k = 2,
L = 10,
eps = 0.1)
## Trace plot
par(mfrow = c(2,1))
plot(chain[,1],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 1")
plot(chain[,2],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 2")
## Density plot
par(mfrow = c(1,1))
## Density plot
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1")
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2")
################### Loading the Algorithm
source("Algorithm.R")
################### Solution to the universe
set.seed(42)
################### Samples
chain <- Standard_HMC(N = 1e5,
k = 2,
L = 10,
eps = 0.1)
################### Visualising Samples
## Trace plot
par(mfrow = c(2,1))
plot(chain[,1],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 1")
plot(chain[,2],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 2")
## Density plot
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1")
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2")
## Trace plot
par(mfrow = c(2,1))
plot(chain[,1],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 1")
plot(chain[,2],type = "l",col = "blue",
xlab = "Iteration",ylab = "",
main = "Trace Plot of Component 2")
## Density plot
## Determining the theoretical density
x <- seq(-4,4,length = 1e4)
y <- dnorm(x)
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1")
lines(x,y,col = "red")
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2")
lines(x,y,col = "red")
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1", lwt = 2)
lines(x,y,col = "red")
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2", lwt = 2)
lines(x,y,col = "red")
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1", lt = 2)
lines(x,y,col = "red")
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2", lt = 2)
lines(x,y,col = "red")
## Determining the theoretical density
x <- seq(-4,4,length = 1e4)
y <- dnorm(x)
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1", lwd = 2)
lines(x,y,col = "red")
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2", lwd = 2)
lines(x,y,col = "red")
x <- seq(-4,4,length = 1e4)
y <- dnorm(x)
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1", lwd = 2)
lines(x,y,col = "red")
legend("topright",
legend = c("Theoretical","Sampled"),
col = c("red", "blue"),lwd = c(1,2))
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2", lwd = 2)
lines(x,y,col = "red")
legend("topright",
legend = c("Theoretical","Sampled"),
col = c("red", "blue"),lwd = c(1,2))
lines(x,y,col = "red", type = 2)
## Determining the theoretical density
x <- seq(-4,4,length = 1e4)
y <- dnorm(x)
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1", lwd = 2)
lines(x,y,col = "red", lt = 2)
legend("topright",
legend = c("Theoretical","Sampled"),
col = c("red", "blue"),lwd = c(1,2))
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2", lwd = 2)
lines(x,y,col = "red", lt = 2)
legend("topright",
legend = c("Theoretical","Sampled"),
col = c("red", "blue"),lwd = c(1,2))
## Determining the theoretical density
x <- seq(-4,4,length = 1e4)
y <- dnorm(x)
par(mfrow = c(2,1))
plot(density(chain[,1]),col = "blue",
main = "Density Plot of Component 1", lwd = 2)
lines(x,y,col = "red", lt = 2)
legend("topright",
legend = c("Theoretical","Sampled"),
col = c("red", "blue"),lwd = c(1,2), lty = c(2,1))
plot(density(chain[,2]),col = "blue",
main = "Density Plot of Component 2", lwd = 2)
lines(x,y,col = "red", lt = 2)
legend("topright",
legend = c("Theoretical","Sampled"),
col = c("red", "blue"),lwd = c(1,2), lty = c(2,1))
### Visualising the samples in 2-d plane
plot(chain[,1],chain[,2],type = "l",col = "blue",
xlab = "Component 1",ylab = "Component 2",
main = "2-D Trace Plot")
par(mfrow = c(1,1))
density1 <- matrix(rnorm(2*5e4 , mean = 0), ncol = 2)
density2 <- matrix(rnorm(2*5e4 , mean = 5), ncol = 2)
density_df <- as.data.frame(rbind(density1, density2))
colnames(density_df) <- c("x", "y")
## True Target
plot.gg <- ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
library(ggplot2)
par(mfrow = c(1,1))
density1 <- matrix(rnorm(2*5e4 , mean = 0), ncol = 2)
density2 <- matrix(rnorm(2*5e4 , mean = 5), ncol = 2)
density_df <- as.data.frame(rbind(density1, density2))
colnames(density_df) <- c("x", "y")
## True Target
plot.gg <- ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
plot.gg
par(mfrow = c(1,1))
density1 <- matrix(rnorm(2*5e4 , mean = 0), ncol = 2)
density_df <- as.data.frame(density1)
colnames(density_df) <- c("x", "y")
## True Target
plot.gg <- ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
plot.gg
par(mfrow = c(1,1))
density1 <- matrix(rnorm(2*5e4 , mean = 0), ncol = 2)
density_df <- as.data.frame(density1)
colnames(density_df) <- c("x", "y")
## True Target
plot.gg <- ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
plot.gg
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.5) +
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.5)
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.5)
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.5, size = 0.1)
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.1, size = 0.1)
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[1:1e3,1], y = chain[1:1e3,2]), color = "blue", alpha = 0.1, size = 0.1)
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1][1:1e3], y = chain[,2][1:1e3]), color = "blue", alpha = 0.1, size = 0.1)
plot.gg +
geom_point(data = as.data.frame(chain[1:1e3,]), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.1, size = 0.1)
as.data.frame(chain[1:1e3,])
plot.gg +
geom_point(data = as.data.frame(chain), aes(x = chain[,1], y = chain[,2]), color = "blue", alpha = 0.1, size = 0.1)
par(mfrow = c(1,1))
density1 <- matrix(rnorm(2*5e4 , mean = 0), ncol = 2)
density_df <- as.data.frame(density1)
colnames(density_df) <- c("x", "y")
## True Target
plot.gg <- ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
plot.gg
plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue", alpha = 0.1, size = 0.1)
x_0 <- 0
p_0 <- 1
plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue")
plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue", size = 3)
## Leap Frog Steps
eps = 0.1
L = 10
p = p_0
q = x_0
moms <- numeric(L+1)
pos <- numeric(L+1)
count <- 1
for(j in 1:L){
# Leap Frog Steps
## Step-1
p <- p + eps/2*grad_log_target(q)
## Step-2
q <- q + eps*p
## Step-3
p <- p + eps/2*grad_log_target(q)
# Storing the values
moms[count] <- p
pos[count] <- q
count <- count + 1
}
plot.gg +
geom_point(aes(x = moms, y = pos), color = "red", size = 3)
## Starting Point
x_0 <- 0
p_0 <- 1
plot.gg <- plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue", size = 3)
plot.gg
## Leap Frog Steps
eps = 0.1
L = 10
p = p_0
q = x_0
moms <- numeric(L)
pos <- numeric(L)
count <- 1
for(j in 1:L){
# Leap Frog Steps
## Step-1
p <- p + eps/2*grad_log_target(q)
## Step-2
q <- q + eps*p
## Step-3
p <- p + eps/2*grad_log_target(q)
# Storing the values
moms[count] <- p
pos[count] <- q
count <- count + 1
}
plot.gg +
geom_point(aes(x = moms, y = pos), color = "red", size = 3)
plot.gg +
geom_point(aes(x = pos, y = moms), color = "red", size = 3)
## Starting Point
x_0 <- 0
p_0 <- 1
plot.gg <- plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue", size = 3)
plot.gg
## Leap Frog Steps
eps = 0.1
L = 20
p = p_0
q = x_0
moms <- numeric(L)
pos <- numeric(L)
count <- 1
for(j in 1:L){
# Leap Frog Steps
## Step-1
p <- p + eps/2*grad_log_target(q)
## Step-2
q <- q + eps*p
## Step-3
p <- p + eps/2*grad_log_target(q)
# Storing the values
moms[count] <- p
pos[count] <- q
count <- count + 1
}
plot.gg +
geom_point(aes(x = pos, y = moms), color = "red", size = 3)
install.packages("Seurat")
## True Target x Momentum
plot.gg <- ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
plot.gg
## Starting Point
x_0 <- 0
p_0 <- 1
plot.gg <- plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue", size = 3)
plot.gg
## Leap Frog Steps
eps = 0.1
L = 40
p = p_0
q = x_0
moms <- numeric(L)
pos <- numeric(L)
count <- 1
for(j in 1:L){
# Leap Frog Steps
## Step-1
p <- p + eps/2*grad_log_target(q)
## Step-2
q <- q + eps*p
## Step-3
p <- p + eps/2*grad_log_target(q)
# Storing the values
moms[count] <- p
pos[count] <- q
count <- count + 1
}
plot.gg +
geom_point(aes(x = pos, y = moms), color = "red", size = 3)
## Starting Point
x_0 <- 0
p_0 <- 1
plot.gg <- plot.gg +
geom_point(aes(x = x_0, y = p_0), color = "blue", size = 3)
plot.gg
## Leap Frog Steps
eps = 0.1
L = 60
p = p_0
q = x_0
moms <- numeric(L)
pos <- numeric(L)
count <- 1
for(j in 1:L){
# Leap Frog Steps
## Step-1
p <- p + eps/2*grad_log_target(q)
## Step-2
q <- q + eps*p
## Step-3
p <- p + eps/2*grad_log_target(q)
# Storing the values
moms[count] <- p
pos[count] <- q
count <- count + 1
}
plot.gg +
geom_point(aes(x = pos, y = moms), color = "red", size = 3)
