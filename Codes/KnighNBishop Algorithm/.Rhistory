p_pls <- p
p_min <- p
s = 1
j = 1
while(s < max_iter){
## Sample a direction
v <- 2*rbinom(1,1,0.5) - 1
## Negative motion
if(v == -1){
for(i in 1:j){
new_st <- conformalLF(p_min,x_min,1,e,g)
p_min <- new_st[[1]]
x_min <- new_st[[2]]
## Check the condition
print(paste("x_min: ",x_min, "p_min: ", p_min, "x_pls: ", x_pls))
if((x_min - x_pls)*p_min <= del_max){
return(c(i + j,v))
}
}
}else{ ## Positive motion
for(i in 1:j){
new_st <- conformalLF(p_pls,x_pls,1,e,g)
p_pls <- new_st[[1]]
x_pls <- new_st[[2]]
## Check the condition
print(paste("x_min: ",x_min, "p_pls: ", p_pls, "x_pls: ", x_pls))
if((x_pls - x_min)*p_pls <= del_max){
return(c(i + j,v))
}
}
}
j <- 2*j
s <- s + 1
}
return(c(j,v))
}
################# The Bishop and Knight Algorithm #################
BnKSampler <- function(N = 1e5){ ## only argument is sample size
## Initialising Values
samples <- numeric(N)
samples[1] <- 0 ## Starting point
momentum <- rnorm(N)
accept <- 0
## Initialising the parameters
e <- find_start_e(0)
g <- find_start_G(0)
## Setting hyper-params
mu1 <- log(10*e)
mu2 <- log(10*g)
e0 <- 1
g0 <- 0.5
H0 <- 0
H <- H0
gamma <- 0.05
t0 <- 10
kappa <- 0.75
Madapt <- N/2
L_tot <- 0
## The main loop
for(i in 2:N){
p <- momentum[i]
x <- samples[i-1]
ret <- BuildTree(x,p,e,g)
L <- ret[1]
v <- ret[2]
L_tot <- L_tot + L
ret <- conformalLF(p,x,L,v*e,g)
p_prop <- ret[[1]]
x_prop <- ret[[2]]
## Energy Calc
eng.curr <- -log_target(x) + (p^2)/2
eng.prop <- -log_target(x_prop) + (p_prop^2)/2
## acceptance ratio
a <- (eng.curr - eng.prop)
## Adaptation of e and G
if (i < Madapt){
H <- (1 - 1/(i + t0))*H + (1/(i + t0))*(0.45 - min(1,exp(a)))
e <- exp(mu1 - sqrt(i)/gamma*H)
e0 <- exp(i^(-kappa)*log(e) + (1 - i^(-kappa))*log(e0))
g <- exp(mu2 - sqrt(i)/gamma*H)
g0 <- exp(i^(-kappa)*log(g) + (1 - i^(-kappa))*log(g0))
}else{
e <- e0
g <- g0
}
## Acceptance and Flips
if(log(runif(1)) <= a){
samples[i] <- x_prop
accept <- accept + 1
g <- -g
}
else{
samples[i] <- samples[i-1]
}
}
## Printing acceptance rate
print(paste("Acceptance Rate: ",accept/N))
print(paste("Final Epsilon: ", e0))
print(paste("Final Gamma: ", g0))
print(paste("Average L: ", L_tot/N))
return(samples)
}
chain <- BnKSampler()
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
BnKSampler()
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
chain <- chain[-1:1e4]
1:1e4
chain <- chain[1e4:1e6]
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
(1e4 + 1):1e6
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Answer to the universe
set.seed(0)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e5)
chain <- chain[(1e4 + 1):1e5] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
is.na(chain)
sum(is.na(chain))
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
chain <- chain[(1e4 + 1):1e6] ## Burning the adaptation samples
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
sum(is.na(chain))
is.na(chain)
plot(density(chain[1:9e5]),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
par(mfrow = c(2,1))
acf(chain,main = "ACF Plot for KnighNBishop Algorithm",
cex.main = 3)
## Looking at the trace plots
plot.ts(chain,
main = "Trace Plot for KnighNBishop Algorithm",
cex.main = 2)
## Loading the algorithm
source("Algorithm.R")
## libraries
library(mcmcse)
## Running the sampler
chain <- BnKSampler(N = 1e6)
## Looking at the actual density
x <- seq(-5,5,0.01)
par(mfrow = c(1,1))
plot(density(chain),
main = "Density Plot for KnighNBishop Algorithm",
cex.main = 2,
lwd = 2)
lines(x,dnorm(x),type = "l",col = "red",
lwd = 2,
lt = 2)
legend("topright",c("Algorithm","True Density"),
col = c("black","red"),
lwd = 2,
lty = 1:2)
